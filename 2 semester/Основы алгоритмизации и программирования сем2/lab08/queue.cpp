#include "queue.h"
#include <iostream>

// Конструктор класса Queue
Queue::Queue(int size) {
	buffer = new char[size]; // Выделение памяти под буфер
	front = 0; // Указатель на первый элемент очереди устанавливается на ноль
	rear = -1; // Указатель на последний элемент очереди устанавливается на -1 (так как очередь пуста)
	capacity = size; // Запоминаем максимальный размер очереди
}

// Деструктор класса Queue
Queue::~Queue() {
	delete[] buffer; // Освобождение памяти
}

// Проверка, заполнена ли очередь до максимального размера
bool Queue::isFull() const {
	return (rear == capacity - 1);
}

// Проверка, пуста ли очередь
bool Queue::isEmpty() const {
	return (front > rear);
}

// Добавление элемента в очередь
void Queue::enqueue(char c) {
	if (isFull()) {
		std::cout << "Queue is full\n"; // Если очередь заполнена, выводим сообщение об ошибке
		return; // И завершаем выполнение метода
	}
	rear++; // Увеличиваем указатель на последний элемент очереди
	buffer[rear] = c; // Добавляем элемент в очередь
}

// Удаление элемента из очереди
char Queue::dequeue() {
	if (isEmpty()) {
		std::cout << "Queue is empty\n"; // Если очередь пуста, выводим сообщение об ошибке
		return '\0'; // И возвращаем нулевой символ
	}
	char c = buffer[front]; // Получаем первый элемент из очереди
	front++; // Увеличиваем указатель на первый элемент очереди
	return c; // Возвращаем удаленный элемент
}

// Вывод очереди на экран
void Queue::printQueue() const {
	std::cout << "Queue: ";
	for (int i = front; i <= rear; i++) { // Проходимся по всей очереди
		std::cout << buffer[i] << " "; // Выводим каждый элемент очереди на экран
	}
	std::cout << "\n"; // Переводим строку
}